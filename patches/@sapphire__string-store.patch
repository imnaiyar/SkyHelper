diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 9282a1c3dfac134cd885d59d21433c6f74444d64..0000000000000000000000000000000000000000
diff --git a/dist/esm/index.mjs b/dist/esm/index.mjs
index bf534ce2a90de7621d2c0c2fa75f1d5ee6f054ed..636fbac24825b1b20f3eee89a0ef49c9e201ace2 100644
--- a/dist/esm/index.mjs
+++ b/dist/esm/index.mjs	
@@ -4,7 +4,7 @@ var __typeError = (msg) => {
 };
 var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
 var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
-var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
+var __publicField = (obj, key, value) => __defNormalProp(obj, key + "", value);
 var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
 var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
 var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
@@ -225,23 +225,56 @@ var _UnalignedUint16Array = class _UnalignedUint16Array {
     return ConverterDouble[0];
   }
   toString() {
-    let result = "";
-    for (let i = 0; i < this.length; i++) {
-      result += String.fromCharCode(__privateGet(this, _buffer)[i]);
+  let result = "";
+  const buffer = __privateGet(this, _buffer);
+  for (let i = 0; i < this.length; i++) {
+    const word = buffer[i];
+    if (word >= 0xD800 && word <= 0xDFFF) {
+      // Encode as \uXXXX escape sequence
+      result += '\\u' + word.toString(16).padStart(4, '0');
+    } else if (word === 0x5C) { // backslash
+      result += '\\\\';
+    } else {
+      result += String.fromCharCode(word);
     }
-    return result;
   }
+  return result;
+}
   toArray() {
     return __privateGet(this, _buffer).slice(0, this.length);
   }
-  static from(value) {
-    if (typeof value !== "string") return value;
-    const buffer = new _UnalignedUint16Array(value.length);
-    for (let i = 0; i < value.length; i++) {
-      __privateGet(buffer, _buffer)[i] = value.charCodeAt(i);
+ static from(value) {
+  if (typeof value !== "string") return value;
+  const buffer = new _UnalignedUint16Array(value.length * 2); // Allocate extra space for escapes
+  let writeIndex = 0;
+  
+  for (let i = 0; i < value.length; i++) {
+    const char = value.charAt(i);
+    if (char === '\\' && i + 1 < value.length) {
+      const next = value.charAt(i + 1);
+      if (next === '\\') {
+        __privateGet(buffer, _buffer)[writeIndex++] = 0x5C;
+        i++;
+      } else if (next === 'u' && i + 5 < value.length) {
+        const hex = value.substr(i + 2, 4);
+        const code = parseInt(hex, 16);
+        if (!isNaN(code)) {
+          __privateGet(buffer, _buffer)[writeIndex++] = code;
+          i += 5;
+        } else {
+          __privateGet(buffer, _buffer)[writeIndex++] = value.charCodeAt(i);
+        }
+      } else {
+        __privateGet(buffer, _buffer)[writeIndex++] = value.charCodeAt(i);
+      }
+    } else {
+      __privateGet(buffer, _buffer)[writeIndex++] = value.charCodeAt(i);
     }
-    __privateSet(buffer, _bitLength, value.length << 4);
-    return buffer;
+  }
+  
+  __privateSet(buffer, _bitLength, writeIndex << 4);
+  __privateSet(buffer, _wordLength, writeIndex);
+  return buffer;
   }
 };
 _buffer = new WeakMap();
