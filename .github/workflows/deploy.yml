name: Deploy

on:
  push:
    branches: [main]
    paths:
      - "packages/skyhelper/src/**"
      - "packages/skyhelper/package.json"
      - "packages/jobs/src/**"
      - "packages/jobs/package.json"
      - "packages/constants/locales/**"
      - "!packages/constants/locales/en-US/**"
  workflow_dispatch:
    inputs:
      to_deploy:
        description: "Specify the package to deploy"
        required: true
        type: choice
        options:
          - "skyhelper"
          - "jobs"
          - "both"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ env.DEPLOY_TARGET }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            skyhelper:
              - 'packages/skyhelper/**'
            jobs:
              - 'packages/jobs/**'
            both:
              - 'packages/constants/locales/**'

      - name: Determine deployment target
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          DEPLOY_TARGET="${{ github.event.inputs.to_deploy }}"
          elif [[ "${{ steps.filter.outputs.both }}" == "true" || ( "${{ steps.filter.outputs.skyhelper }}" == "true" && "${{ steps.filter.outputs.jobs }}" == "true" ) ]]; then
          DEPLOY_TARGET="both"
          elif [[ "${{ steps.filter.outputs.skyhelper }}" == "true" ]]; then
          DEPLOY_TARGET="skyhelper"
          elif [[ "${{ steps.filter.outputs.jobs }}" == "true" ]]; then
          DEPLOY_TARGET="jobs"
          fi
          echo "DEPLOY_TARGET=$DEPLOY_TARGET" >> $GITHUB_ENV

  deploy:
    needs: changes
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy selected package
        run: |
          echo "Deploying $DEPLOY_TARGET..."
          if [[ "$DEPLOY_TARGET" == "both" ]]; then
            docker compose up -d --build
          else
            docker compose up -d --build $DEPLOY_TARGET
          fi
        env:
          # Misc
          DEPLOY_TARGET: ${{ needs.changes.outputs.target }}

          # Bot envs
          TOKEN: ${{ secrets.TOKEN }}
          NODE_ENV: "production"
          NODE_OPTIONS: "--import ./scripts/register-loader.mjs"
          MONGO_CONNECTION: ${{ secrets.MONGO_CONNECTION }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
          API_ALLOWLIST_KEY: ${{ secrets.API_ALLOWLIST_KEY}}
          DBL_TOKEN: ${{ secrets.DBL_TOKEN }}
          TOPGG_TOKEN: ${{ secrets.TOPGG_TOKEN }}
          # Webhooks
          BUG_REPORTS: ${{ secrets.BUG_REPORTS }}
          COMMANDS_USED: ${{ secrets.COMMANDS_USED }}
          CONTACT_US: ${{ secrets.CONTACT_US }}
          ERROR_LOGS: ${{ secrets.ERROR_LOGS }}
          GUILD: ${{ secrets.GUILD }}
          READY_LOGS: ${{ secrets.READY_LOGS }}
          SUGGESTION: ${{ secrets.SUGGESTION }}
          ERROR_WEBHOOK: ${{ secrets.ERROR_LOGS }}
          JOBS_DEBUG_LOGS: ${{ secrets.JOBS_DEBUG_LOGS }}

          # Sentry
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_URL: ${{ secrets.SENTRY_URL }}

          # Turbo
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Cleanup Unused Images
        run: docker image prune -f
