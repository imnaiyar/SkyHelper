import type { _Nullable, APIComponentInContainer } from "discord-api-types/v10";
import { z } from "zod/v4";
export enum PlannerAction {
  ToggleIAP = "toggle-iap",
  ToggleWL = "toggle-wl",
  ToggleSeasonPass = "toggle-season-pass",
  ToggleFavorite = "toggle-fav",
  UnlockTree = "unlock-tree",
  LockTree = "lock-tree",
  ModifyTree = "modify-tree",
  ToggleListNode = "tg-ln",
  NestingRotation = "nr",
}

export const PlannerCurrenciesSchema = z.object({
  candles: z.number().min(0),
  hearts: z.number().min(0),
  ascendedCandles: z.number().min(0),
  giftPasses: z.number().min(0),
  eventCurrencies: z.record(
    z.string(),
    z.object({
      tickets: z.number().min(0),
    }),
  ),
  seasonCurrencies: z.record(
    z.string(),
    z.object({
      candles: z.number().min(0),
      hearts: z.number().min(0).optional(),
    }),
  ),
});

export const PlannerDataSchema = z.object({
  version: z.string(),
  storageData: z.object({
    date: z.string(),
    currencies: PlannerCurrenciesSchema,
    unlocked: z.string(),
    wingedLights: z.string(),
    favourites: z.string(),
    seasonPasses: z.string(),
    gifted: z.string(),
    keys: z.record(z.string(), z.any()),
  }),
  user: z
    .string()
    .regex(/^\d{17,19}$/)
    .optional(),
});

export interface NavigationState {
  /** Current page */
  p?: number;

  /** The top level tab it should point to
   * * t = tab
   */
  t: DisplayTabs;

  /** Invoking user's id */
  user: string;

  /** Specific item it should point to
   * * it =item
   */
  it?: string;

  /** Further filter, for example, spirits have `type`, `season`, etc. This is used to navigate there
   * * This is generated by `FilterManager`
   * * f = filter
   */
  f?: string;

  /** Any extra data that are passed
   * * d = data
   */
  d?: string;

  /** Array of values, if it was through a string select.
   * * v = values
   */
  v?: string[];

  /** Options for back button, provided when we want to redirect to somewhere else, instead of generic back
   * For ex, imagine we go to a particular area from wl tab, providing this back btn, we can come back to wl tab
   * * b = back
   */
  b?: _Nullable<Omit<NavigationState, "b" | "user">> | null;

  /** any string to prevent custom_id duplication */
  i?: string;
}

export enum DisplayTabs {
  Home = "h",
  Realms = "r",
  Spirits = "s",
  Seasons = "se",
  Events = "e",
  Items = "i",
  WingedLights = "w",
  Shops = "sh",
  Areas = "a",
  Profile = "p",
  Favourite = "fv",
}

export interface IPaginatedProps<T> {
  /** Items to paginate */
  items: T[];
  user?: string;

  scrollTo?: (items: T[]) => T;

  /** The current page */
  page?: number;

  /** Override default items per-page (default: `5`) */
  perpage?: number;
  /**
   * The callback that should return container components for each items that is to be displayed
   * @param item The item passed inside the items array
   * @param i Index of the item in the passed array
   */
  itemCallback: (item: T, i: number) => APIComponentInContainer[];
}

// short values to save custom_id spaces
export enum FilterType {
  SpiritTypes = "sp",
  Areas = "ar",
  Realms = "rl",
  Seasons = "sn",
  Events = "ev",
  Order = "o",
  ItemTypes = "it",
  Shops = "shp",
  SpiritTrees = "st",
  Currencies = "cr",
  Highlight = "h",
  Any = "a",
}
export enum OrderType {
  NameAsc = "name_asc",
  NameDesc = "name_desc",
  DateDesc = "date_desc",
  DateAsc = "date_asc",
}
